/**Declarar las variables referenciando a los datos que se utilizaran  */
let FiltroGrCon = document.getElementById("GrupoConserva");
let FiltroGrCong = document.getElementById("GrupoCongelado");
let FiltroPalagicos = document.getElementById("GrupoPalagicos");
let FiltroATUN = document.getElementById("GrupoAtun");
let BtnGrupos = document.getElementById("BtnSearch");
let BtnSearchFormato = document.getElementById("BtnSearchFormato");
let LiquidoCobertura = document.getElementById("GrupoCobertura");
let Formato = document.getElementById("GrupoFormato")
let BtnEnvase = document.getElementById("BtnSearchEnvase"); 
let ClearFilter = document.getElementById("Filtros");
let URIGRUPOS = "http://192.168.1.12:8080/GetGrupos";
let LOADING = document.getElementById("animacion2");
let URICOUNT = `http://192.168.1.12:8080/GetCuentas`
let URIENVASE = "http://192.168.1.12:8080/GetTipoEnvase";
let GETATUNURI = 'http://192.168.1.12:8080/GetProductAtun';
let LIQUIDOCOBERTURAURI = "http://192.168.1.12:8080/LiquidoCobertura"; 
let CONFIGAPI2 = {
    method:'Get',
    headers:{
        "Access-Control-Allow-Origin":"*"
    }
}
let TotalCajasMain = document.getElementById("TotalCajasMain");
let TotalUnidadesMain = document.getElementById("TotalUnidadesMain");
let URIPRODUCT = 'http://192.168.1.12:8080/StokProductobyroduct';

/*TABLA AUTOGENERADA PARA LOS DATOS*/
async function TableAutogenerated1(Tabla, TablaId, nombre) {
    Tabla.innerHTML += ` <div class="Contenido3_Tabla_Content">
    <div class="Header_Product">
        <div>
            <div>
                <label class="form-check-label" for="inlineCheckbox1">Total de Cajas : <input clase="InputCuentas" type="text" id="Cajas${TablaId}" readonly> </label>
                <br>
                <label class="form-check-label" for="inlineCheckbox1">Unidades Disponibles : <input clase="InputCuentas" type="text" id="Saldo${TablaId}" readonly> </label>
          </div>
        </div>
         <h5>${nombre}</h5>
    </div>
    <div class="Contenidos3_Tabla">
        <table class="table table-hover">
            <thead>
            <tr>
                <th scope="col">NUM_GUIA</th>
                <th scope="col">PRODUCTO</th>
                <th scope="col">UNIDADES</th>
                <th scope="col">UNID_DESPACHADAS</th>
                <th scope="col">SALDO</th>
                <th scope="col">CAJAS</th>
                <th scope="col">FECHA_GUIA</th>
                <th scope="col">OBSERVACIONES_GUIA</th>
                <th scope="col">OBSERVACIONES</th>
                <th scope="col">NUMERO</th>
                <th scope="col">CODIGOERP</th>
                <th scope="col">CODIGO</th>
                <th scope="col">NOMBRE_DOC</th>
                <th scope="col">NOMBRE_ESPECIE</th>
                <th scope="col">FECHA_PRODUCCION</th>
                <th scope="col">NOMBRE_ITEMS_TIPOS</th>
                <th scope="col">OBS_CALIDAD</th>
                <th scope="col">ESTADO_CALIDAD</th>
                <th scope="col">TIPO_VENTA</th>
                <th scope="col">CODIGO_LATA</th>
                <th scope="col">UNIDADES_CAJA</th>
                <th scope="col">MES_INGRESO_BODEGA</th>
                <th scope="col">AÃ‘O_INGRESO_BODEGA</th>
                <th scope="col">NOMBRE_ITEMS_TIPO_ENVASE</th>
                <th scope="col">RECIBIDO</th>
                <th scope="col">STICKER</th>
                <th scope="col">ETIQUETAS</th>
                <th scope="col">CARTON</th>
                <th scope="col">TIPO_GRUPO</th>
            </thead>
            <tbody id="TablaAuto${TablaId}">
            </tbody>
        </table>
    </div>
    </div>`
}

/**OBTENER EL VALOR DE LAS CAJAS Y EL TOTAL DE SALDO, EN BASE A LA RUTA DE LA API */
async function AcountValues(URI, PARAMS, CONFIG, SALDO, CAJAS) {
    //console.log(CAJAS)
    let count = await fetch(`${URI}/${PARAMS}`, CONFIG);
    let resultjson = await count.json();
    resultjson.forEach((element1)=>{
        CAJAS.value = `${element1.SUMATORIACAJAS}`
        SALDO.value= `${element1.SALDOCUENTA}`
    });
    return {
        CAJAS:CAJAS.value,
        SALDO:SALDO.value
    }
}

async function ByProduct(URI, CONFIG, PARAMS, INDEX, NOMBRE){

    let nombreitem;
    await TableAutogenerated1(ClearFilter, INDEX, NOMBRE);
    let TablaAutogenerada = document.getElementById(`TablaAuto${INDEX}`);

    let resultjson = await fetch(`${URI}/${PARAMS}`, CONFIG);
    let data = await resultjson.json();
    await data.forEach(async(element, index)=>{
            TablaAutogenerada.innerHTML += ` 
                                <tr>
                                <td> ${element.num_guia}</td>
                                <td> ${element.nombre_items}</td>
                                <td> ${element.unidades}</td>
                                <td> ${element.unidades_despachadas}</td>
                                <td> ${element.saldo}</td>
                                <td> ${element.cajas}</td>
                                <td> ${element.fecha_guia}</td>
                                <td> ${element.obs_guia}</td>
                                <td> ${element.observaciones}</td>
                                <td> ${element.numero}</td>
                                <td> ${element.CodigoErp}</td>
                                <td> ${element.codigo}</td>
                                <td> ${element.nombredoc}</td>
                                <td> ${element.nombre_especie}</td>
                                <td> ${element.fecha_produccion}</td>
                                <td> ${element.Nombre_Items_Tipos}</td>
                                <td> ${element.Obs_Calidad}</td>
                                <td> ${element.estado_calidad}</td>
                                <td> ${element.tipo_venta}</td>                            
                                <td> ${element.codigo_lata}</td>
                                <td> ${element.Unidades_Cajas}</td>
                                <td> ${element.Mes_Ingreso_Bodega}</td>
                                <td> ${element.Anio_Ingreso_Bodega}</td>
                                <td> ${element.Nombre_Items_Tipo_Envase}</td>
                                <td> ${element.Recibido}</td>
                                <td> ${element.Sticker}</td>
                                <td> ${element.Etiquetas}</td>
                                <td> ${element.Carton}</td>
            </tr>`
            nombreitem = element.nombre_items
    });
    return nombreitem
  
}

/**FILTRO POR CAMPO */
async function GetFilter(CONFIG, URI, NOMBRE) {
    
    let resultjson = await fetch(`${URI}/${NOMBRE}`, CONFIG);
    let data = await resultjson.json();
    let CuentasT = await CuentasTotales(data);
    let TotalSaldo = await CountTotal1(CuentasT);
    let TotalCajas = await CountTotal2(CuentasT);
    return {TotalCajas, TotalSaldo}
}

async function CuentasTotales(Datos) {
    let Totales =[];
     Datos.forEach((element, index)=>{
        ByProduct(URIPRODUCT, CONFIGAPI2, element.nombre_items, index, element.nombre_items);
    })
    for (let index = 0; index < Datos.length; index++) {
        let S = document.getElementById(`Saldo${index}`);
        let C = document.getElementById(`Cajas${index}`);
        let Cuentas = await AcountValues(URICOUNT, Datos[index].nombre_items, CONFIGAPI2, S, C);
        Totales.push(Cuentas);
    }
    return Totales
}

async function GetFilter2(CONFIG, URI, NOMBRE) {
    let resultjson = await fetch(`${URI}/${NOMBRE}`, CONFIG);
    let data = await resultjson.json();
    return data;
}

async function GroupRequestItems(NAMEFILTER) {
    
        let resultado = await GetFilter2(CONFIGAPI2, encodeURI(URIENVASE), NAMEFILTER);
        return resultado;

}

async function GetAtun(URI, CONFIG) {
    let Atun = await fetch(URI, CONFIG);
    let data = await Atun.json();
    let TotalesValores = await CuentasTotales(data);
    let TotalSaldo = await CountTotal1(TotalesValores);
    let TotalCajas = await CountTotal2(TotalesValores);
    return {TotalCajas, TotalSaldo}

}

/**Buscar por liquido de cobertura */
async function GetLiquidoDeCobertura(URI, CONFIG) {
    let liquido = await fetch(URI, CONFIG);
    let data = await liquido.json();
    data.forEach((element,index)=>{
        ByProduct(URIPRODUCT, CONFIGAPI2, element.nombre_items, index, element.nombre_items);
    })

    // let TotalesValores = await CuentasTotales(data);
    // let TotalSaldo = await CountTotal1(TotalesValores);
    // let TotalCajas = await CountTotal2(TotalesValores);
    return {TotalCajas:1, TotalSaldo:2}

}

/**BUSCAR GRUPOS */

async function Palagidos() {
    let FirstData = await GroupRequestItems("TALL");
    let listaData = ["OVAL", "TINAPA", "TAPA  PLANA", "1/2 TALL"];
    for (const iterator of listaData) {
         let completedresult = await GroupRequestItems(iterator);
         completedresult.forEach((element)=> {
           FirstData.push(element)
        });
    }
    return FirstData;
}

// async function GetAllBox(URI, CONFIG, PARAMS) {
    
//     let Saldocuenta =[];
//     let saldocajas = [];
//     let getcount =await fetch(`${URI}/${PARAMS}`, CONFIG);
//     let jsonresult = await getcount.json();
//     jsonresult.forEach((element, index)=>{
//         Saldocuenta.push(element.SALDOCUENTA);
//         saldocajas.push(element.SUMATORIACAJAS);
//     });
//     return Saldocuenta

// }

// async function CountBox(AllData) {
//     var Cuentas = [0,1];
//     AllData.forEach(async(element, index)=>{
//         let ALLBOX =await GetAllBox(URICOUNT, CONFIGAPI2, element.nombre_items);
//         Cuentas.push(ALLBOX);
//     });
//     return Cuentas
// }

async function CountTotal1(Cuentas) {
    let totalcuentas = Cuentas.reduce((init, nextvalue)=>{  
        return init + parseInt(nextvalue.SALDO)
    },0);
    return totalcuentas;
}

async function CountTotal2(Cuentas) {
    let totalcuentas = Cuentas.reduce((init, nextvalue)=>{  
        return init + parseInt(nextvalue.CAJAS)
    },0);
    return totalcuentas;
}

async function PalagidosGet() {
    let resultPalagidos = await Palagidos();
    let TotalesValores = await CuentasTotales(resultPalagidos);
    let TotalSaldo = await CountTotal1(TotalesValores);
    let TotalCajas = await CountTotal2(TotalesValores);
    return {TotalCajas, TotalSaldo}
}

async function SearchGroups() {
    if (FiltroGrCon.checked == false && FiltroGrCong.checked == false) {
        Swal.fire({
            icon: 'warning',
            title: 'No a legido ninguna opciÃ³n',
            text: 'Asegurece de elegir una opciÃ³n',
        });
    }
    if (FiltroGrCon.checked == true) {
        ClearFilter.innerHTML = "";
        LOADING.style = "display:flex";
        let ConservaTotales = await GetFilter(CONFIGAPI2, URIGRUPOS, "Conserva");
        TotalCajasMain.innerHTML = ConservaTotales.TotalCajas;
        TotalUnidadesMain.innerHTML = ConservaTotales.TotalSaldo;
        LOADING.style = "display:none";
    }
    if (FiltroGrCong.checked == true) {
        ClearFilter.innerHTML = "";
        LOADING.style = "display:flex";
        let CongeladoTotales = await GetFilter(CONFIGAPI2, URIGRUPOS, "Congelado");
        TotalCajasMain.innerHTML = CongeladoTotales.TotalCajas;
        TotalUnidadesMain.innerHTML = CongeladoTotales.TotalSaldo;
        LOADING.style = "display:none";
    }
}

async function SearchEnvase() {
    if (FiltroPalagicos.checked == false && FiltroATUN.checked == false) {
        //warning
        Swal.fire({
            icon: 'warning',
            title: 'No a legido ninguna opciÃ³n',
            text: 'Asegurece de elegir una opciÃ³n',
        });
    }
    if (FiltroATUN.checked == true) {
        ClearFilter.innerHTML = "";
        LOADING.style = "display:flex";
        let TotalAtun = await GetAtun(GETATUNURI, CONFIGAPI2);
        TotalCajasMain.innerHTML = TotalAtun.TotalCajas;
        TotalUnidadesMain.innerHTML = TotalAtun.TotalSaldo;
       LOADING.style = "display:none";

    }
    if (FiltroPalagicos.checked == true) {
        ClearFilter.innerHTML = "";
        LOADING.style = "display:flex";
        let TotalesPalagidos = await PalagidosGet();
        TotalCajasMain.innerHTML = TotalesPalagidos.TotalCajas;
        TotalUnidadesMain.innerHTML = TotalesPalagidos.TotalSaldo;
        LOADING.style = "display:none";
    }
}

async function SearchLiquidoFormat() {
    if (LiquidoCobertura.checked == false && Formato.checked == false) {
        Swal.fire({
            icon: 'warning',
            title: 'No a legido ninguna opciÃ³n liquido',
            text: 'Asegurece de elegir una opciÃ³n',
        });
    }
    if (LiquidoCobertura.checked == true) {
        ClearFilter.innerHTML = "";
        LOADING.style = "display:flex";
        let TotalLiquido = await GetLiquidoDeCobertura(LIQUIDOCOBERTURAURI, CONFIGAPI2);
        TotalCajasMain.innerHTML = TotalLiquido.TotalCajas;
        TotalUnidadesMain.innerHTML = TotalLiquido.TotalSaldo;
       LOADING.style = "display:none";

    }
    if (Formato.checked == true) {
        Swal.fire({
            icon: 'warning',
            title: 'Opcion en desarrollo',
            text: 'Finaizara pronto',
        });
    }
}


BtnGrupos.addEventListener('click', SearchGroups);

BtnEnvase.addEventListener('click', SearchEnvase);

BtnSearchFormato.addEventListener('click', SearchLiquidoFormat)